using Authentication.Context;
using Authentication.Model;
using Authentication.Security;
using Resenha.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Resenha.Util;
namespace Resenha.BO
{
    public class AuthenticationBO
    {

        public ReturnJson Register(User pUser,
                                   TokenConfiguration pTokenConfigurations,
                                   SigningConfigurations pSigningConfigurations,
                                   AuthenticaContext context)
        {

            ReturnJson returnJson = new ReturnJson();
            UserLogin user = new UserLogin();
            int credentialsAccept = 1;

            Token geraToken = new Token(pTokenConfigurations, pSigningConfigurations);

            try
            {
                //campos obrigatorios
                if (pUser == null)
                {
                    credentialsAccept = 0;
                }
                //informações invalidas
                else if (string.IsNullOrEmpty(pUser.firstName) ||
                        string.IsNullOrEmpty(pUser.lastName) ||
                        string.IsNullOrEmpty(pUser.email))
                {
                    credentialsAccept = 0;
                }

                //senhas inválidass
                else if (!ContainsLetterLower(pUser.userLogin.password) &&
                         !ContainsLetterUpper(pUser.userLogin.password) &&
                         !ContainsNumber(pUser.userLogin.password) &&
                         pUser.userLogin.password.Length < 6)
                    credentialsAccept = 2;

                //senhas diferentes
                else if (!pUser.userLogin.password.Equals(pUser.userLogin.confirmPassword))
                    credentialsAccept = 2;


                ////usuário existente
                else if (context.register.Any(p => p.email.Equals(pUser.email)))
                {
                    credentialsAccept = 5;
                }

                switch (credentialsAccept)
                {
                    case 0:

                        returnJson.statusProcess = Enumerator.StatusProcess.Invalid_Credentials;
                        returnJson.message = "Preencha os campos obrigatórios";
                        break;
                    case 1:
                        returnJson.token = geraToken.GeraToken(pUser);
                        returnJson.dtStartToken = DateTime.Now;
                        returnJson.dtExpirationToken = DateTime.Now.AddHours(pTokenConfigurations.Hours);
                        returnJson.message = "Usuário cadastrado com sucesso";
                        pUser.dtRegister = DateTime.Now;

                        pUser.userLogin.userName = string.Concat(pUser.firstName, pUser.firstName);

                        context.register.Add(pUser);
                        context.SaveChanges();

                        returnJson.data.Add(pUser);

                        break;

                    case 2:

                        returnJson.statusProcess = Enumerator.StatusProcess.Invalid_Credentials;
                        returnJson.message = "Informações inválidas, senha não atende aos critérios desejados. Senha deve conter números, letras minúsculas e letras maíusculas.";
                        break;

                    case 3:

                        returnJson.statusProcess = Enumerator.StatusProcess.Invalid_Credentials;
                        returnJson.message = "Senha e confirmação de senha estão diferentes";
                        break;
                    case 5:

                        returnJson.statusProcess = Enumerator.StatusProcess.Invalid_Credentials;
                        returnJson.message = "Existe um cadastro com este e-mail.";
                        break;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return returnJson;
        }




        #region Private Method's
        public bool ContainsLetterLower(string text)
        {
            if (text.Where(c => char.IsLower(c)).Count() > 0)
                return true;
            else
                return false;
        }


        public bool ContainsLetterUpper(string text)
        {
            if (text.Where(c => char.IsUpper(c)).Count() > 0)
                return true;
            else
                return false;
        }

        public bool ContainsNumber(string text)
        {
            if (text.Where(c => char.IsNumber(c)).Count() > 0)
                return true;
            else
                return false;
        }
        #endregion
    }
}
